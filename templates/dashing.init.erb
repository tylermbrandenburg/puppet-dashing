#!/bin/bash

# Generated by puppet - Do not edit!
#
# Adapted from https://gist.github.com/gregology/5313326
# Then copied from https://github.com/benbria/dashing-chef
#
# Dashboard will start at boot. Check out the boot log for trouble shooting "/var/log/boot.log"
# USAGE: start|stop|restart|status

### BEGIN INIT INFO
# Provides:          dashboard
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO

set -e
. /lib/lsb/init-functions

# Must be a valid filename
NAME="<%= @service %>"
DASHING_DIR="<%= @homedir %>"
PIDFILE="$DASHING_DIR/$NAME.pid"

DASHING_PORT=<%= @port %>
DAEMON_OPTS="start -d -e production -p $DASHING_PORT -P $PIDFILE"

RUNUSER=<%= @user %>
RUNGROUP=<%= @group %>

function checkuser() {
  if [[ $UID != 0 ]]; then
    if [[ `whoami` != "$RUNUSER" ]]; then
      log_failure_msg "$1 must be run as root or $RUNUSER"
      exit 1
    fi
  fi
}

function start_dashing() {
  log_action_msg "Starting daemon: $NAME" || true
  sleep 5
  start-stop-daemon --start --chuid $RUNUSER:$RUNGROUP --chdir $DASHING_DIR --pidfile $PIDFILE --name thin --user $RUNUSER --exec /usr/local/bin/dashing -- $DAEMON_OPTS
  log_end_msg 0
}

function stop_dashing() {
  log_action_msg "Stopping daemon: $NAME" || true
  start-stop-daemon --stop --pidfile $PIDFILE --user $RUNUSER --retry 30 --oknodo
  log_end_msg 0
}

case "$1" in
  start)
    checkuser start
    start_dashing
  ;;
  stop)
    checkuser stop
    stop_dashing
  ;;
  restart)
    checkuser restart
    log_action_msg "Restarting daemon: $NAME"
    stop_dashing
    start_dashing
  ;;
  status)
    status_of_proc -p $PIDFILE $DAEMON $NAME
  ;;
  logs)
    tail -F $DASHING_DIR/log/thin.log
  ;;
  *)
  echo "Usage: "$1" {start|stop|restart|status}"
  exit 1
esac

exit 0
